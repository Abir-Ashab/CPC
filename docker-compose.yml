services:
  # MongoDB Service
  mongo:
    image: mongo:7
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - photo-app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Service
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - photo-app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # NestJS Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: photo-backend
    ports:
      - "4000:4000"
    environment:
      - PORT=4000
      - MONGODB_URI=mongodb://mongo:27017/photo-upload-db
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=photos
      - MINIO_USE_SSL=false
    depends_on:
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - photo-app-network

  # Next.js Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: photo-frontend
    ports:
      - "3000:3000"
    environment:
      - BACKEND_URL=http://backend:4000
    depends_on:
      - backend
    networks:
      - photo-app-network

volumes:
  mongo_data:
  minio_data:

networks:
  photo-app-network:
    driver: bridge
